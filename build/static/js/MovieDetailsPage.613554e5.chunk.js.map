{"version":3,"sources":["components/movieDetailsPage/MovieDetailsPage.js","components/services/moviesApi.js"],"names":["Cast","lazy","Reviews","getId","props","match","params","movieId","MovieDetailsPage","state","film","handleClick","history","location","search","push","pathname","from","id","this","console","log","fetchMovieDetails","then","result","setState","data","type","onClick","src","poster_path","alt","title","width","release_date","substr","vote_average","overview","genres","map","genre","key","name","to","fallback","color","path","component","Component","axios","defaults","baseURL","fetchTrendingMovies","trendingParams","process","get","response","fetchSearch","query","searchParams","detailsParams","fetchCastInformation","castParams","fetchReviews","reviewsParams"],"mappings":"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","file":"static/js/MovieDetailsPage.613554e5.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { Component, lazy, Suspense } from 'react';\nimport Spinner from 'react-spinkit';\nimport { Route, NavLink } from 'react-router-dom';\nimport { fetchMovieDetails } from '../services/moviesApi';\n\nconst Cast = lazy(() => import('./cast/Cast' /* webpackChunkName: \"Cast\" */));\n\nconst Reviews = lazy(() =>\n  import('./reviews/Reviews' /* webpackChunkName: \"Reviews\" */),\n);\n\nconst getId = props => props.match.params.movieId;\nconst getGanres = arr => arr.map(genre => <li key={genre.id}>{genre.name}</li>);\nconst getYear = str => {\n  return str.substr(0, 4);\n};\n\nclass MovieDetailsPage extends Component {\n  state = { film: null };\n\n  componentDidMount() {\n    const id = getId(this.props);\n    console.log(this.props);\n    fetchMovieDetails(id).then(result => this.setState({ film: result.data }));\n  }\n\n  handleClick = () => {\n    const { history, location } = this.props;\n    if (location.state) {\n      if (location.state.search) {\n        history.push({\n          pathname: location.state.from,\n          search: `query=${location.state.search}`,\n        });\n      } else {\n        history.push('/');\n      }\n    } else {\n      history.push('/');\n    }\n  };\n\n  render() {\n    const { film } = this.state;\n    const { location } = this.props;\n    return (\n      film && (\n        <section>\n          <div>\n            <button type=\"button\" onClick={this.handleClick}>\n              Go back\n            </button>\n            <div>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${film.poster_path}`}\n                alt={film.title}\n                width=\"200\"\n              />\n            </div>\n            <ul>\n              <li>\n                <h2>\n                  {film.title}\n                  <span>({getYear(film.release_date)})</span>\n                </h2>\n              </li>\n              <li>Vote average : {film.vote_average}</li>\n              <li>\n                <h3>Overview</h3>\n                <p>{film.overview}</p>\n              </li>\n              <li>\n                <h3>Genres</h3>\n                <ul>{getGanres(film.genres)}</ul>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h2>Additional information</h2>\n            <ul>\n              <li>\n                <NavLink\n                  to={{\n                    pathname: `/movies/${getId(this.props)}/cast`,\n                    state: {\n                      from: location.state ? location.state.from : '/',\n                      search: location.state ? location.state.search : '',\n                    },\n                  }}\n                >\n                  Cast\n                </NavLink>\n              </li>\n              <li>\n                <NavLink\n                  to={{\n                    pathname: `/movies/${getId(this.props)}/reviews`,\n                    state: {\n                      from: location.state ? location.state.from : '/',\n                      search: location.state ? location.state.search : '',\n                    },\n                  }}\n                >\n                  Reviews\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n          <Suspense\n            fallback={<Spinner name=\"ball-pulse-sync\" color=\"purple\" />}\n          >\n            <Route path=\"/movies/:movieId/cast\" component={Cast} />\n            <Route path=\"/movies/:movieId/reviews\" component={Reviews} />\n          </Suspense>\n        </section>\n      )\n    );\n  }\n}\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = () => {\n  const trendingParams = `trending/movie/day?api_key=${process.env.REACT_APP_API_KEY}`;\n  return axios.get(trendingParams).then(response => response.data);\n};\n\nexport const fetchSearch = query => {\n  const searchParams = `search/movie?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n  return axios.get(searchParams).then(response => response);\n};\n\nexport const fetchMovieDetails = id => {\n  const detailsParams = `movie/${id}?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`;\n  return axios.get(detailsParams).then(response => response);\n};\n\nexport const fetchCastInformation = id => {\n  const castParams = `movie/${id}/credits?api_key=${process.env.REACT_APP_API_KEY}`;\n  return axios.get(castParams).then(response => response);\n};\n\nexport const fetchReviews = id => {\n  const reviewsParams = `movie/${id}/reviews?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`;\n  return axios.get(reviewsParams).then(response => response);\n};\n"],"sourceRoot":""}